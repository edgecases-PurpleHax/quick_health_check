"""
Pentester script for updating the local SSH config with new IPs from the Flask server.

This script fetches the latest IP addresses for specified hosts from a Flask server 
and updates the local SSH config file with the new IPs for the specified hosts ('apex', 
'cybercoders', 'creativecc'). Only the IP addresses are updated, and other configurations 
such as IdentityFile or User are left unchanged.

Variables:
    HOME_DIR (str): The home directory of the current user.
    LOCAL_CONFIG_PATH (str): The path to the local SSH config file.
    TEMP_CONFIG_PATH (str): The path to a temporary config file.
    SERVER_CONFIG_URL (str): The URL of the Flask server where the IPs are fetched from.
    hosts_to_update (list): List of hostnames whose IPs need to be updated in the SSH config.

Functions:
    fetch_ips_from_server(): Fetches new IPs from the server.
    update_local_config(new_ips): Updates the local SSH config file with the new IPs.
"""

import os
import requests

HOME_DIR = os.path.expanduser("~")
LOCAL_CONFIG_PATH = os.path.join(HOME_DIR, ".ssh", "config")
TEMP_CONFIG_PATH = os.path.join(HOME_DIR, ".ssh", "config_temp")
SERVER_CONFIG_URL = "http://localhost:5000/config"
hosts_to_update = ["apex", "cybercoders", "creativecc"]

def fetch_ips_from_server():
    """
    Fetch the new IPs from the server.

    This function sends a GET request to the Flask server to retrieve the latest IP 
    addresses for the specified hosts.

    Returns:
        dict: A dictionary of hostnames and their corresponding new IPs. 
        If the request fails, an empty dictionary is returned.
    """
    response = requests.get(SERVER_CONFIG_URL)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch IPs. Status code: {response.status_code}")
        return {}

def update_local_config(new_ips):
    """
    Update the local SSH config file with the new IP addresses for the specified hosts.

    This function reads the local SSH config file, searches for the specified hosts, and 
    updates their IP addresses if they have changed. If any updates are made, the updated 
    config is written back to the SSH config file.

    Args:
        new_ips (dict): A dictionary of hostnames and their new IPs.
    """
    with open(LOCAL_CONFIG_PATH, "r") as file:
        lines = file.readlines()

    updated = False

    for i, line in enumerate(lines):
        for host in hosts_to_update:
            if f"Host {host}" in line:
                if "HostName" in lines[i + 1]:
                    current_ip = lines[i + 1].split()[1]
                    new_ip = new_ips.get(host)
                    if new_ip and current_ip != new_ip:
                        lines[i + 1] = f"    HostName {new_ip}\n"
                        print(f"Updated {host} with new IP: {new_ip}")
                        updated = True

    if updated:
        with open(LOCAL_CONFIG_PATH, "w") as file:
            file.writelines(lines)
        print("SSH config updated.")
    else:
        print("No updates were made to the config.")

if __name__ == "__main__":
    new_ips = fetch_ips_from_server()
    if new_ips:
        update_local_config(new_ips)

