import os
import requests

HOME_DIR = os.path.expanduser("~")
LOCAL_CONFIG_PATH = os.path.join(HOME_DIR, ".ssh", "config")
TEMP_CONFIG_PATH = os.path.join(HOME_DIR, ".ssh", "config_temp")
SERVER_CONFIG_URL = "http://localhost:5000/config"
hosts_to_update = ["apex", "cybercoders", "creativecc"]

def fetch_ips_from_server():
    """
    Fetch the new IPs from the server.
    
    Returns:
        dict: A dictionary of hostnames and their new IPs.
    """
    response = requests.get(SERVER_CONFIG_URL)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch IPs. Status code: {response.status_code}")
        return {}

def update_local_config(new_ips):
    """
    Update the local SSH config file with the new IP addresses for the specified hosts.
    
    Args:
        new_ips (dict): A dictionary of hostnames and their new IPs.
    """
    with open(LOCAL_CONFIG_PATH, "r") as file:
        lines = file.readlines()

    updated = False

    # Iterate over lines and find hosts to update
    for i, line in enumerate(lines):
        for host in hosts_to_update:
            if f"Host {host}" in line:
                # Check the next line for HostName and replace the old IP with the new one
                if "HostName" in lines[i + 1]:
                    current_ip = lines[i + 1].split()[1]
                    new_ip = new_ips.get(host)
                    if new_ip and current_ip != new_ip:
                        lines[i + 1] = f"    HostName {new_ip}\n"
                        print(f"Updated {host} with new IP: {new_ip}")
                        updated = True

    if updated:
        # Write the updated config back to the file
        with open(LOCAL_CONFIG_PATH, "w") as file:
            file.writelines(lines)
        print("SSH config updated.")
    else:
        print("No updates were made to the config.")

if __name__ == "__main__":
    new_ips = fetch_ips_from_server()
    if new_ips:
        update_local_config(new_ips)

